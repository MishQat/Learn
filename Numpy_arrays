import numpy as np
#arrays (like lists)
#a=np.array([[1.2,2.1,2.2], [12.0,3.4,23.5]], dtype="int16"#to change the data type)#adding 3rd bracekts inside another one increases the dimension of the matrix
#print(a.ndim)#tells us the dimension of the array
#print(a.shape)#the shape (y, x)
#print(a.dtype)
#print(a)

#Changing stuff of arrays
b=np.array([[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]])
#choosing a specific value [r,c] and [startindex:endindex:steps]
#print(b[0, 1:11:2])
#to change elements b[2,3] = some value
b[0, :] = [21,22,23,24,25,26,27,28,29,30] # changed the whole row
#print(b)
#3d
c=np.array([[[1,2],[3,4]],[[5,6],[7,8]]])
c[0,:,:]= [[56,54],[54,34]]# work outside in
#print(c)
#print(c[:, 0, :])

#to create a matrix having the same numbers
d=np.full((3,3,3), 12)
#print(d)
#indentity matrix
d=np.identity(3)
#print(d)

#repeat an array
e=np.array([23,32,41])
#print(e)
#print(np.repeat(e, 3, axis=0))

#problem set 1

arr1=np.ones((5,5))
arr2=np.zeros((3,3))
arr1[1:4:1, 1:4:1] = arr2 ###-#when indexing [startindex:endindex:steps , ] The endindex is exclusive so thats why we took 4
arr1[2,2]=9
#print(arr1)

#to copy an array
a=np.array([1,2,3])
b=a.copy()
##Linear algebra
a=np.ones((2,3))
b=np.full((3,2), 5)
#print(np.matmul(a,b))
#print(np.linalg.det(np.matmul(a,b)))
#Many more linear algebra stuff can be done, visit : https://numpy.org/doc/stable/reference/routines.html

#Statistics
stat1=np.array([[10,20,30],[230,43,130]])
#print(stat1)
#print(np.sum(stat1, axis=0))
#max,min,sum, etc

#to reshape an array,
#print(stat1.reshape(3,2))
#you can also stack arrays
#vstack
#print(np.vstack((stat1,stat1)))



##Boolean masking and advanced indexing

#print ((stat1 > 50)&(stat1 < 200)) #prints true or false

#print(stat1[stat1 > 100]) # prints the elements in the array which are greater that the value

# you can also index with a list
d=np.array([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15], [16,17,18,19,20], [21,22,23,24,25], [26,27,28,29,30]])
print(d)


print(d[2:4,0:2])
print(d[[0,4,5], 3:])

e= d[[2]]
f= d[[3]]
print(np.vstack((e[:, 0:2],f[:, 0:2])))

https://docs.scipy.org/doc/numpy/reference/routines.math.html
